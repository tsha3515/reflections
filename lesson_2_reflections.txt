What happens when you initialize a repository? Why do you need to do it?
	Initialising a repository creates a .git file, which will contain meta
	data of the repository over time. A .git file is needed for any commits hence
	is a prerequisite for version control.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	The staging area contains files that the user selects from the
	working directory. Files can be added or removed from the staging area but
	once the staging area is commited to the repository, they become a snapshot in
	time. 

How can you use the staging area to make sure you have one commit per logical
change?
	Add to the staging area only those files which contain code change
	relating to logical change. Use git diff --staged to confirm before
	commiting.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	Situations could include adding experimental features, or create a
	different version of the program while maintaining the original version.
	Branching allows for these different versions to be accessed easily without
	the overhead of checking out back and forwards between versions. 

How do the diagrams help you visualize the branch structure?
	It shows the parents of each commit, and the sequence of parents that leads to
	the initial commit, ie the sequence that shows in git log. Diagrams can also
	show unreachable commits.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
